name: Release

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Semantic versioning type?'
        required: true
        type: choice
        options:
          - PATCH
          - MINOR
          - MAJOR

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: bump
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "$CURRENT_VERSION"
          
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          case "${{ github.event.inputs.semver }}" in
            MAJOR)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            MINOR)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            PATCH)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          npm version $NEW_VERSION --no-git-tag-version
          echo "new_version=v$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then PREV_TAG=$(git rev-list --max-parents=0 HEAD); fi
          
          REPO="${{ github.repository }}"

          ALL_CHANGES=$(git log --pretty=format:"* %s [<code>%h</code>](https://github.com/$REPO/commit/%H)" $PREV_TAG..HEAD)
          CORE_CHANGES=$(echo "$ALL_CHANGES" | grep -E "^\* (feat:|fix:|perf:|refactor:|test:|build:)" || echo "")
          DOC_CHANGES=$(echo "$ALL_CHANGES" | grep -E "^\* (docs:|example:)" || echo "")
          MISC_CHANGES=$(echo "$ALL_CHANGES" | grep -v -E "^\* (feat:|fix:|perf:|refactor:|test:|build:|docs:|example:)" || echo "")
          
          {
            if [ -n "$CORE_CHANGES" ]; then
              echo "### Core Changes"
              echo "$CORE_CHANGES"
              echo ""
            fi
            
            if [ -n "$DOC_CHANGES" ]; then
              echo "### Documentation"
              echo "$DOC_CHANGES"
              echo ""
            fi
            
            if [ -n "$MISC_CHANGES" ]; then
              echo "### Misc Changes"
              echo "$MISC_CHANGES"
              echo ""
            fi

            echo ""
            echo "> https://github.com/$REPO/compare/$PREV_TAG...${{ steps.bump.outputs.new_version }}"
          } > CHANGELOG.md
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Push version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package*.json
          git commit -m "${{ steps.bump.outputs.new_version }}" -m "Co-authored-by: Fauzira Alpiandi <fwzyrln@gmail.com>"
          git push origin ${{ github.ref }}

      - name: Create tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -f ${{ steps.bump.outputs.new_version }}
          git push -f origin ${{ steps.bump.outputs.new_version }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.bump.outputs.new_version }}
          tag_name: ${{ steps.bump.outputs.new_version }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}